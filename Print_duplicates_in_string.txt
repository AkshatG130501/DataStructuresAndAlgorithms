//Print all duplicates and their count 

M1:- Using Maps 

    1). Ordered Maps -> T.C-> O(N*Log(N))  S.C -> O(K)  K-size of map.
    2). Unordered Maps -> T.C -> O(N)  S.C -> O(K)

M2:- Using Hashing 

#include <iostream> 
#define No_of_chars 256

void fillCharCounts(char *str, int *count)
    {
        int i;
        for (i = 0; *(str + i); i++)
        count[*(str + i)]++;
    }

 void printDups(char *str)
    {
         
        // Create an array of size 256 and fill
        // count of every character in it
        int *count = (int *)calloc(NO_OF_CHARS,
                                      sizeof(int));
        fillCharCounts(str, count);
 
        // Print characters having count more than 0
        int i;
        for (i = 0; i < NO_OF_CHARS; i++)
        if(count[i] > 1)
            printf("%c, count = %d \n", i, count[i]);
 
        free(count);
    }
};
