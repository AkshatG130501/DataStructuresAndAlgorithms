//Find the nth fibonacci number 


Recursion :-> Space : O(N)  Time : O(2^N)
 
// Top down approach (Recursion + Memoization)

Space : O(N)   Time  :O(N)
 
#include <iostream>

using namespace std;

int fib(int n, int*dp){
    // base case
    if(n==0 || n==1){
        return n;
    }
    
    //recursive case
    if(dp[n]!=0){
        return dp[n];
    }
    
    
    return dp[n] = fib(n-1,dp)+fib(n-2,dp);
    
}


int main()
{
    int n;
    cin>>n;
    int dp[100] ={0};
    
    cout<<fib(n,dp)<<endl;

    return 0;
}


// Bottom Up Approach 

Space : O(N)  Time : O(N)

int fib(int n){
    int dp[100] = {0};
    dp[1] = 1;
    
    for(int i = 2;i<=n;i++){
        dp[i] = dp[i-1]+dp[i-2];
    }
    return dp[n];
}


// Space Optimized Bottom Up Approach 

Space : O(1)  Time : O(N)

int fib(int n){
    
    int a = 0;
    int b = 1;
    int c;
    
    for(int i=2;i<=n;i++){
        c = a+b;
        a = b;
        b = c;
    }
    
    return c;
    
}

